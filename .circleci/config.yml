aliases:
  - &node
    - image: circleci/node:10

  - &save-repo-cache
      key: repo-cache-{{ .Environment.CIRCLE_SHA1 }}
      paths:
        - ~/project

  - &restore-repo-cache
      key: repo-cache-{{ .Environment.CIRCLE_SHA1 }}

  - &save-npm-cache
      key: npm-cache-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      paths:
        - ./node_modules

  - &save-jspm-cache
      key: jspm-cache-{{ checksum "package.json" }}-{{ checksum "jspm.config.js" }}
      paths:
        - ./jspm_packages

  - &restore-npm-cache
      keys:
        - npm-cache-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

  - &restore-jspm-cache
      keys:
        - jspm-cache-{{ checksum "package.json" }}-{{ checksum "jspm.config.js" }}

  - &save-build-cache
      key: build-cache-{{ .Environment.CIRCLE_SHA1 }}
      paths:
        - ./build

  - &restore-build-cache
      key: build-cache-{{ .Environment.CIRCLE_SHA1 }}

version: 2
jobs:
  checkout:
    machine: true
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - save_cache: *save-repo-cache

  setup:
    docker: *node
    steps:
      - run:
          name: Install latest version of NPM
          command: sudo npm install -g npm@latest
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-jspm-cache
      - run:
          name: Install NPM dependencies
          command: npm ci
      - save_cache: *save-npm-cache
      - save_cache: *save-jspm-cache

  test:
    docker: *node
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-jspm-cache
      - run:
          name: Run tests
          command: npm test

  build:
    docker: *node
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-jspm-cache
      - run:
          name: Build
          command: npm run build
      - save_cache: *save-build-cache

  greenkeeper:
    docker: *node
    steps:
      - restore_cache: *restore-repo-cache
      - run: sudo npm install -g greenkeeper-lockfile@latest
      - run: |
          greenkeeper-lockfile-update
          greenkeeper-lockfile-upload

  deploy:
    machine: true
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-build-cache
      - run:
          name: Install lftp
          command: sudo apt-get install lftp
      - deploy:
          name: Sync via FTP
          command: lftp ftp://${FTP_USERNAME}:${FTP_PASSWORD}@${FTP_HOSTNAME} -e "set ftp:ssl-allow off; mirror -v -e -R ./build /html; quit"

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - checkout
      - setup:
          requires:
            - checkout
      - test:
          requires:
            - setup
      - build:
          requires:
            - setup
      - greenkeeper:
          requires:
            - test
            - build
          filters:
            branches:
              only: /^greenkeeper.*/
      - deploy:
          requires:
            - test
            - build
          filters:
            branches:
              only: master
